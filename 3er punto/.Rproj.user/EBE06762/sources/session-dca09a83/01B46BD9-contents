---
title: "Regresión No lineal"
author: "Zuleima Carriazo"
date: "2023-10-05"
output: html_document
---

---
header-includes:
- \usepackage{longtable}
- \usepackage[utf8]{inputenc}
- \usepackage[spanish]{babel}\decimalpoint
- \setlength{\parindent}{1.25cm}
- \usepackage{amsmath}
- \usepackage{array}
- \usepackage{float}
- \usepackage{multirow}
output:
  pdf_document: 
    number_sections: yes
fontsize: 12pt
papersize: letter
geometry: margin = 1in
language: "es"
editor_options: 
  markdown: 
    wrap: 72
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = F, fig.align = "center",fig.pos = "H")
library(kableExtra)
library(knitr)
library(leaps)
library(tidyverse)
```


```{=tex}
\input{titlepage}
\thispagestyle{empty}
\tableofcontents
\newpage
\thispagestyle{empty}
\listoffigures
\listoftables
\newpage
```


```{=tex}
\pagestyle{myheadings}
\setcounter{page}{3}
```

```{r cars}
library(readxl)

```

```{r}
datos <- read_excel("Metro.xlsx")
head(datos)
```

```{r}
x <- c(datos$`Tiempo V1` , datos$`Tiempo V2` , datos$`Tiempo V3`)
y <- c(datos$`Velocidad V1` , datos$`Velocidad V2` , datos$`Velocidad V3`)

datos <- data.frame(x=x,y=y)
```




![](imagen1.jpeg)

![](imag2.jpeg)



# Analisis descritivo
```{r}
plot(x , y)
```

El gráfico relaciona la proporcionalidad inversa entre la variable tiempo y la variable velocidad de cada uno de los vagones de manera correcta.

## Modelo 1:  (a\*exp(b\*x)

```{r}
#install.packages("minpack.lm")
```


```{r}
# Cargar la biblioteca minpack.lm
library(minpack.lm)


# Función de modelo
modelo <- function(x,a,b) {
  return(a*exp(b*x))
}

# Estimar valores iniciales utilizando nlsLM
ajuste_inicial <- nlsLM(data= datos, y ~ modelo(x, a, b),
                        start = list(a = 1,b = 1))

# Obtener los valores iniciales estimados
valores_iniciales_estimados <- coef(ajuste_inicial)
print(valores_iniciales_estimados)

# Ajustar el modelo final con los valores iniciales estimados
ajuste_final <- nlsLM(y ~ modelo(x,a,b), start = valores_iniciales_estimados)

```

Por el criterio de $ residual-sum-of-squares$ próximo a $1$ indica para la suma de los cuadrados de los residuos del modelo con este valor alto, el modelo no es capaz de explicar una gran proporción de la variabilidad en los datos. Por lo que se ajusta la velocidad de llegada de los vagones del metro Medellín con otro modelo que haga mejores estimaciones


```{r}
plot(y ~ x, data = datos)
lines(seq(1, 3, length.out = 50), 
      predict(ajuste_final, 
              newdata = data.frame(x = seq(1, 3, length.out = 50))))

```


## Modelo 2: a \* x\^b

```{r}

# Función de modelo
modelo <- function(x,a,b) {
  return(a*(x^b))
}

# Estimar valores iniciales utilizando nlsLM
ajuste_inicial <- nlsLM(data= datos, y ~ modelo(x, a, b),
                        start = list(a = 1,b = 1))

# Obtener los valores iniciales estimados
valores_iniciales_estimados <- coef(ajuste_inicial)
print(valores_iniciales_estimados)

# Ajustar el modelo final con los valores iniciales estimados
ajuste_final <- nlsLM(y ~ modelo(x,a,b), start = valores_iniciales_estimados)


```
Con este nuevo ajuste, se observa una mejor representación del comportamiento de las velocidades respecto al tiempo de llegada a la estación de los vagones del metro

```{r}
plot(y ~ x, data = datos)
lines(seq(1, 3, length.out = 50), 
      predict(ajuste_final, 
      newdata = data.frame(x = seq(1, 3, length.out = 50))))

```


## Modelo 3: Spline suavizado

```{r}

spline_model_vagon<- smooth.spline(datos$x, datos$y, df = 6)

plot(datos$x, datos$y, type = "b", col = "blue", xlab = "Tiempo de llegada", ylab = "Velocidad de los vagones")
lines(spline_model_vagon$x, spline_model_vagon$y, col = "red", lwd = 2)
legend("topright", legend = c("Datos Originales", "Spline Ajustado"), col = c("blue", "red"), lty = 1, lwd = 2)

nuevos_tiempos <- c(4, 5, 7) 
predicciones <- predict(spline_model_vagon, xout = nuevos_tiempos)
print(predicciones$y)

```
```{r}
spline_model_vagon
```

Con un suavizado moderado de los datos (spar= 1.045756 ), y una penalización relativamente pequeña (lambda es igual a 0.001086861), y GCV igual a 0.003125936, medida de la bondad de ajuste del modelo spline suavizado , lo que sugiere un buen ajuste del modelo a los datos; lo que indica que la velocidad con que llegan los tres primeros  vagones del Metro de Medellín a las estaciones se pueden modelar y/o ajustar con un modelo de regresion no lineal como el spline suavizado, teniendo en cuenta el tiempo de llegada de éstos a la estación, y ademas se pueden hacer predicciones, teniendo en cuenta que en condiciones normales de operación del servicio, el tiempo que emplea un tren al entrar por cierta punto de referencia a la estación no es exageradamente grande y se puede medir en segundos.







PUNTO DE LA ESTATURA VS EDAD

```{r}
library(readr)
maduraciónsexual <- read_csv2("maduraciónsexual.csv")
head(maduraciónsexual)

#View(maduraciónsexual)
#fecha_actual <- Sys.Date()

#maduraciónsexual$FECHANACIM <- as.Date(maduraciónsexual$FECHANACIM, format = "%Y-%m-%d")  # Asegúrate de que la fecha de nacimiento esté en el formato correcto
#maduraciónsexual$Edad <- as.integer(difftime(fecha_actual, maduraciónsexual$FECHANACIM, units = "days") / 365)

#head(maduraciónsexual)

```
 
```{r}
masculino <- maduraciónsexual[maduraciónsexual$SEXO == 1, ]
femenino <- maduraciónsexual[maduraciónsexual$SEXO == 2, ]

```


```{r}
plot(femenino$EDAD, femenino$ESTATURAP1, pch = 19, col = "blue",  xlab = "Edad mujeres", ylab = "Estatura mujeres")
media_estatura <- tapply(femenino$ESTATURAP1, femenino$EDAD, mean)
lines(names(media_estatura), media_estatura, col = "red", type = "b")

```
```{r}
mujer<- data.frame(Eda=femenino$EDAD , esta=femenino$ESTATURAP1)
modmujer= nls(esta~ SSlogis(log(Eda), Asym, xmid, scal), mujer)
summary(modmujer)

coef(modmujer)

coef(summary(modmujer))
```


Según los resultados arrojados acerca del ajuste de la curva del modelo logistico suavizado, Asym=199.16051  representa el valor asintótico superior o límite superior que la variable dependiente (en este caso, la estatura) se acerca a $199.16051$ a medida que la variable independiente (la edad) aumenta infinitamente, teniendo en cuenta las edades limites para la categoría de niño y/o adolescentes. En otras palabras, "Asym" indica el valor máximo al que tiende la variable dependiente. En un contexto de crecimiento, esto podría representar la estatura máxima que una persona podría alcanzar. Xmid=1.53644  representa la ubicación del punto medio o el valor de la variable independiente en el cual la variable dependiente alcanza la mitad de su valor asintótico superior. En el contexto de la relación entre la edad y la estatura, "xmid" indica la edad en la que se espera que la estatura alcance el 50% de su valor máximo; y $scal=0.9338134$ este parámetro controla la pendiente de la curva logística en el punto medio (xmid). Cuanto mayor es el valor de scal, más pronunciada es la pendiente en el punto medio, lo que significa que los cambios en la variable predictora (edad en este caso) tienen un efecto más marcado en la variable de respuesta (estatura), como se ve acontinuación en el gráfico.


```{r}
library(ggplot2)

ggplot(data = mujer, aes(x = Eda, y = esta)) +
  geom_point() +
  labs(x = "Edad", y = "Estatura") +
  geom_smooth(method = "nls", 
              formula = y ~ 190 / (1 + exp(-b * (x - x0))),
              method.args = list(start = c(b = 1, x0 = 10)),
              se = FALSE, 
              color = "blue") +
  theme_minimal()

```

modelar la estatura en función de la edad es util a la hora de comprender cómo la estatura cambia a medida que las personas envejecen, es por ello que se implementa un modelo de regresión no lineal logistico para observar esta tendencia. En ella se puede ver que para hombres (niños) hasta cierta edad  15 a 17 años la estatura va progresivamente en aunmento, mientras que de ahí en adelante se mantiene relativamente estable, hasta de nuevo llegar a una edad donde la estatura empieza a decrecer.



```{r}
plot(masculino$EDAD,masculino$ESTATURAP1, pch = 19, col = "blue",  xlab = "Edad hombres", ylab = "Estatura Hombres")
media_esta <- tapply(masculino$ESTATURAP1,masculino$EDAD, mean)
lines(names(media_esta), media_esta, col = "red", type = "b")
```
 
 
 
```{r}
plot( maduraciónsexual$EDAD, maduraciónsexual$ESTATURAP1, pch = 19, col = "blue",  xlab = "Edad", ylab = "Estatura")
media_estatu<- tapply(maduraciónsexual$ESTATURAP1, maduraciónsexual$EDAD, mean)
lines(names(media_estatu), media_estatu, col = "red", type = "b")

```
 


```{r}
hombre <- data.frame(edad = masculino$EDAD, estatura = masculino$ESTATURAP1)
modelo_logistico_hombre <- nls(estatura ~ 190 / (1 + exp(-b * (edad - x0))), 
                               data = hombre, 
                               start = list(b = 1, x0 = 10))
summary(modelo_logistico_hombre)
```

Un valor positivo de $b$ indica un aumento en la estatura a medida que la edad aumenta, en este caso, $b$ se estima en aproximadamente $0.148827$ lo cual muestra relativo aumento a medida que se cumplen los primero años de edad; mientras que $x_0$ es el punto de inflexión de la curva logística. $x_0$ se estima en aproximadamente $3.369932$ los cuales representan las estimaciones de la pendiente y el desplazamiento horizontal (traslación) de la curva logística, respectivamente.

En este caso, como los parametros son estadisticamente significativos, se pueden ajustar los datos a este modelo; 
Achieved convergence tolerance: 4.834e-07 indica la tolerancia de convergencia alcanzada en el proceso de ajuste del modelo, en este caso, se alcanzó una tolerancia muy baja, lo que sugiere una buena convergencia del modelo.


```{r}

ggplot(data = hombre, aes(x = edad, y = estatura)) +
  geom_point() +
  labs(x = "Edad de hombres", y = "Estatura de hombres") +
  geom_smooth(method = "nls", 
              formula = y ~ 190 / (1 + exp(-b * (x - x0))),
              method.args = list(start = c(b = 1, x0 = 10)),
              se = FALSE, 
              color = "blue") +
  theme_minimal()

```

Aquí el modelo está tratando de describir cómo la estatura de los hombres cambia a medida que envejecen. Por ello, un gráfico del ajuste del modelo ayuda a visualizar que para el género masculino la tendencia de la altura es a crecer hasta cierta edad, y que despúes de esto podrían mantenerse estable estas metricas hasta nuevamente marcar tendencia, esta vez a decrecer luego de cumplir cierta cantidad de años; sin embargo esto no se refleja en este gráfico, donde solo es observable la trayectoria al crecimiento progresivo respecto a edades tempranas.
 
 
 
```{r}
Estatura <- maduraciónsexual$ESTATURAP1
Edad <- maduraciónsexual$EDAD

datos<-data.frame(Estatura, Edad)
plot(Estatura~ Edad, data=datos)
```

En general se observa que el crecimiento de las personas en este estudio es hasta edades entre 14-17 y que despues de cumplir estos años, parece mantenerse estables entre 150-170 centímetros  de estatura.

 

```{r}
nuevas_edades <- data.frame(edad = c(20, 25, 30, 35, 40))
pronosticos <- predict(modelo_logistico_hombre, newdata = nuevas_edades)
pronosticos

```
Según los datos proporcionados, se realiza un pronostico de estaturas para edades  futuras de los hombres incluidos en este estudio para conocer la estatura que tendrían en tales edades.
 
```{r}
deviance(modelo_logistico_hombre)
```




4: PUNTO DE NADADORES

```{r}
Nadadores <- read.table("Finalestilolibre400metros.txt", header = FALSE, sep = "\t",  stringsAsFactors = FALSE)
head(Nadadores)
```

```{r}
library(tidyverse)
sexo<-c(rep(1,36),rep(2,43))

temp <- read_delim("Finalestilolibre400metros.txt", col_names = FALSE) %>% as.data.frame()
names(temp) <- paste0("x", 1:16)

temp<-as.matrix(temp)
temp
temp2<- apply(temp[,-c(1,2)], 2, function(x)as.numeric(x))
temp2

tiempos.seg<-cbind(temp2[,c(1 ,2)],60*temp2[,c(3,5,7,9,11,13)]+temp2[,c(3,5,7,9,11,13)+1])
tiempos.seg

matplot(t(tiempos.seg),type="b", ylab="Tiempo", xlab="Tramos de piscina")
boxplot(tiempos.seg)
plot(tiempos.seg[,1],tiempos.seg[,8])


cor(tiempos.seg)
temp3<-apply(tiempos.seg,1,rank)
cor(temp3)
veloc<-    50/  cbind(tiempos.seg[,1],tiempos.seg[,2]-tiempos.seg[,1],
                tiempos.seg[,3]-tiempos.seg[,2],tiempos.seg[,4]-tiempos.seg[,3],
                tiempos.seg[,5]-tiempos.seg[,4],tiempos.seg[,6]-tiempos.seg[,5],
                tiempos.seg[,7]-tiempos.seg[,6],tiempos.seg[,8]-tiempos.seg[,7])

colMeans(veloc)
cor(veloc)
colMeans(veloc[sexo==1,])
cor(veloc[sexo==1,])
colMeans(veloc[sexo==2,])
cor(veloc[sexo==2,])
par(mfrow=c(1,1))
```
A medida que un nadador realiza un recorrido se puede observar como le toma más tiempo, y llama la atención que uno de los representantes, al comienzo del recorrido 4 se toma demasiado tiempo hasta completar el recorrido 6, donde abandona la competencia.


```{r}
matplot(t(veloc),type="b", ylab = "Velocidad de los Nadadores por piscinas", xlab = "piscinas recorridos")
```

El gráfico deja ver la curva de velocidad de cada nadador respecto a las piscinas que ha recorrido durante la competencia. En ella se observa el competidor que presentó problemas de tiempo en  la gráfica anterior, durante el recorrido 4  no sigue la tendencia del resto de sus adversarios, al parecer tuvo alguna eventualidad que le hizo perder el ritmo velocidad de nado, al parecer, algún accidente le hizo parar en la competencia, quiso retomar al completar el recorrido 5, sin embargo la velocidad de nado no fue la más optima y se tuvo que retirar de la competencia.




```{r}
veloc_new  <-veloc[-c(66),] #Excluyendo participente que se retiro

x<- c( rep(1,times=78),
       rep(2,times=78),
       rep(3,times=78),
       rep(4,times=78),
       rep(5,times=78),
       rep(6,times=78),
       rep(7,times=78),
       rep(8,times=78)
)

vel <- c(veloc_new[,1],
         veloc_new[,2],
         veloc_new[,3],
         veloc_new[,4],
         veloc_new[,5],
         veloc_new[,6],
         veloc_new[,7],
         veloc_new[,8]
         )

```

```{r}
plot(x,vel)
```




# Modelo 1:  a*exp(b*x)
```{r}
# Cargar la biblioteca minpack.lm
library(minpack.lm)


# Función de modelo
modelo <- function(x,a,b) {
  return(a*exp(b*x))
}

# Estimar valores iniciales utilizando nlsLM
ajuste_inicial <- nlsLM(vel ~ modelo(x, a, b),
                        start = list(a = 1,b = 1))

# Obtener los valores iniciales estimados
valores_iniciales_estimados <- coef(ajuste_inicial)


# Ajustar el modelo final con los valores iniciales estimados
ajuste_final <- nlsLM(vel ~ modelo(x,a,b), start = valores_iniciales_estimados)
```

### Parametros estimados: 

```{r}
print(valores_iniciales_estimados)
```

```{r}
plot(vel ~ x)
lines(seq(1, 8, length.out = 50), 
      predict(ajuste_final, 
              newdata = data.frame(x = seq(1, 8, length.out = 50))))
```

# Modelo 2: a*(x^b)

```{r}

modelo <- function(x,a,b) {
  return(a*(x^b))
}

# Estimar valores iniciales utilizando nlsLM
ajuste_inicial <- nlsLM(vel ~ modelo(x, a, b),
                        start = list(a = 1,b = 1))

# Obtener los valores iniciales estimados
valores_iniciales_estimados <- coef(ajuste_inicial)


# Ajustar el modelo final con los valores iniciales estimados
ajuste_final <- nlsLM(vel ~ modelo(x,a,b), start = valores_iniciales_estimados)



```

### Parametros estimados:

```{r}
print(valores_iniciales_estimados)
```


```{r}
plot(vel ~ x)
lines(seq(1, 8, length.out = 50), 
      predict(ajuste_final, 
              newdata = data.frame(x = seq(1, 8, length.out = 50))))
```























